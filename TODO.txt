1) HttpClientExtensions => ApiGetAsync, ApiPostAsync

 protected async Task<TResponse> GetAsync<TResponse>(string uri, string queryString)
        {
            try
            {
                var response = await HttpClient.GetAsync(uri + queryString);
                return await response.Content.ReadAsAsync<TResponse>();
            }
            catch (Exception e)
            {
                Log.Error(e);
                // Do nothing for now as it's WIP
                throw;
            }
        }

        protected async Task<TResponse> GetAsync<TResponse>(string uri, object model)
        {
            try
            {
                var response = await HttpClient.GetAsync(uri + model.ToQueryString());
                return await response.Content.ReadAsAsync<TResponse>();
            }
            catch (Exception e)
            {
                Log.Error(e);
                // Do nothing for now as it's WIP
                throw;
            }
        }

        protected async Task<TResponse> PostAsync<TRequest, TResponse>(string uri, TRequest model)
            where TResponse : IUxModel, new()
        {
            try
            {
                var response = await HttpClient.PostAsJsonAsync(uri, model);
                return await response.Content.ReadAsAsync<TResponse>();
            }
            catch (Exception e)
            {
                Log.Error(e);

                return new TResponse
                {
                    Message = "An internal server error has occurred. Please contact your system administrator.",
                    MessageType = MessageTypes.Error,
                    HasError = true
                };
            }
        }

2) QueryHelpers .ToQuery

 public static class QueryStringUtils
    {
        public static string ToUrlWithQuery(this string url, NameValueCollection values) =>
            $"{url}{values.ToQueryString()}";

        public static string ToQueryString( this NameValueCollection values )
        {
            var array = values.AllKeys
                .Where( key => values.GetValues( key ) != null )
                .Select( key => $"{key?.UrlFriendly()}={values.GetValues( key )[ 0 ].UrlFriendly()}" );

            return "?" + string.Join( "&" , array );
        }

        public static string ToQueryString(this object obj, IEnumerable<string> propertiesFilter = null) =>
            obj.ToNameValueCollection(propertiesFilter).ToQueryString();

        public static NameValueCollection ToNameValueCollection(this object obj, IEnumerable<string> propertiesFilter = null)
        {
            var nameValueCollection = new NameValueCollection();

            if (obj == null) return nameValueCollection;

            var objectProperties = obj.GetType().GetProperties();

            if (propertiesFilter != null)
            {
                objectProperties = objectProperties
                    .Where(property => propertiesFilter.Any(propertyName => propertyName == property.Name))
                    .ToArray();
            }

            foreach (var property in objectProperties)
            {
                nameValueCollection.Add(property.Name, property.GetValue(obj)?.ToString());
            }

            return nameValueCollection;
        }

        public static string UrlFriendly(this string param)
        {
            return param == null ? string.Empty : Uri.EscapeDataString(param);
        }
    }
Todo: make this as soon as posible
